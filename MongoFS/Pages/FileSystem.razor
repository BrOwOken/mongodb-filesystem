@page "/filesystem"
@using MongoFS.Data
@using MongoDB.Driver;
@using MongoDB.Bson;
@inject DatabaseService dbService

<button class="btn btn-dark" @onclick="(e) => { GoBack(); }">&lt; Go back</button>

@if (currentItemId == Guid.Empty)
{
    <h3 class="mt-3">Drives</h3>
    <div class="form-group">
        <label for="nameInput">Drive name</label>
        <input class="form-control" type="text" @bind="nameInput" name="nameInput" />
    </div>
    <button class="btn btn-primary" @onclick="(e) => { AddDrive(nameInput); }">Add drive</button>

    <table class="table mt-3">
        <tr>
            <th>Name</th>
            <th>Size</th>
            <th>ID</th>
        </tr>
        @foreach (var item in drives)
        {
        <tr>
            <td>@item.name</td>
            <td>@item.size kB</td>
            <td>@item.id</td>

            <td><button class="btn btn-sm btn-success" @onclick="(e) => {AddToHistory(currentItemId, currentItemType); GetItems(item.id, FileSystemType.Drive); }">Open</button></td>
            <td><button class="btn btn-sm btn-danger" @onclick="(e) => { DeleteDrive(item.id); }">Delete</button></td>
        </tr>
        }
    </table>
}
else if (currentItemType == FileSystemType.Folder || currentItemType == FileSystemType.Drive)
{
    if (currentItemType == FileSystemType.Drive)
    {
        <h3 class="mt-3">Drive @dbService.GetName(currentItemId, currentItemType)</h3>
    }
    else
    {
        <h3 class="mt-3">Folder @dbService.GetName(currentItemId, currentItemType)</h3>
    }
<div>
    <div class="form-group">
        <label for="fileFolderSelect">Select type</label>
        <select class="form-control" name="fileFolderSelect" @bind="fileFolderSelection">
            <option value="folder">Folder</option>
            <option value="file">File</option>
        </select>
    </div>

    <div class="form-group">
        <label for="nameInput">Name</label>
        <input class="form-control" type="text" @bind="nameInput" name="nameInput" placeholder="Enter name" />
    </div>

    @if (fileFolderSelection == "file")
    {
        <div class="form-group">
            <label for="fileType">File type</label>
            <input class="form-control" name="fileType" type="text" @bind="fileType">
        </div>

        <div class="form-group">
            <label for="fileData">Insert file data</label>
            <textarea class="form-control" @bind="fileData" name="fileData" rows="4">Sample data</textarea>
        </div>

        <button class="btn btn-primary" @onclick="(e) => { AddItem(FileSystemType.File); }">Add file</button>

    }
    else
    {
        <button class="btn btn-primary" @onclick="(e) => { AddItem(FileSystemType.Folder); }">Add folder</button>
    }
</div>


    <table class="table mt-3">
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Created</th>
            <th>Size</th>
            <th>ID</th>
        </tr>
        @foreach (var folder in folders)
        {
            <tr>
                <td>@folder.name</td>
                <td>Folder</td>
                <td>@folder.created</td>
                <td>@folder.size kB</td>
                <td>@folder.id</td>
                <td><button class="btn btn-sm btn-success" @onclick="(e) => {AddToHistory(currentItemId, currentItemType); GetItems(folder.id, FileSystemType.Folder);}">Open</button></td>
                <td><button class="btn btn-sm btn-danger" @onclick="(e) => { DeleteItem(folder.id, FileSystemType.Folder); }">Delete</button></td>
            </tr>
        }
        @foreach (var file in files)
        {
            <tr>
                <td>@file.name</td>
                <td>@file.fileType</td>
                <td>@file.created</td>
                <td>@file.size kB</td>
                <td>@file.id</td>
                <td><button class="btn btn-sm btn-danger" @onclick="(e) => {AddToHistory(currentItemId, currentItemType); DeleteItem(file.id, FileSystemType.File); }">Delete</button></td>
            </tr>
        }
    </table>
}
else
{

}
@code {
    List<Drive> drives = new List<Drive>();
    List<Folder> folders;
    List<File> files;
    List<FileSystemItem> items;

    string fileData;
    string nameInput;
    string fileFolderSelection;
    string fileType;

    Guid currentItemId = Guid.Empty;
    FileSystemType currentItemType;

    Stack<Page> history;

    protected override void OnInitialized()
    {
        history = new Stack<Page>();
        drives = dbService.GetDrives();
    }

    public EventCallback GetItems(Guid id, FileSystemType type)
    {
        items = dbService.GetItems(id, type);
        DivideFiles();
        currentItemId = id;
        currentItemType = type;
        this.StateHasChanged();
        Console.WriteLine("get items called");
        return new EventCallback();
    }
    public EventCallback AddDrive(string name)
    {
        dbService.AddDrive(name);
        drives = dbService.GetDrives();
        this.StateHasChanged();

        return new EventCallback();
    }
    public EventCallback AddItem(FileSystemType type)
    {
        if (type == FileSystemType.Folder)
        {
            dbService.AddFolder(currentItemId, currentItemType, nameInput);
        }
        else
        {
            dbService.AddFile(currentItemId, currentItemType, nameInput, fileData, fileType);
        }
        return GetItems(currentItemId, currentItemType);
    }
    public EventCallback DeleteDrive(Guid id)
    {
        dbService.Delete(id, FileSystemType.Drive);
        drives = dbService.GetDrives();
        this.StateHasChanged();
        return new EventCallback();
    }
    public EventCallback DeleteItem(Guid id, FileSystemType type)
    {
        dbService.Delete(id, type);
        return GetItems(currentItemId, currentItemType);
    }
    public void AddToHistory(Guid folderId, FileSystemType type)
    {
        history.Push(new Page(folderId, type));
        Console.WriteLine("history added");
    }
    public EventCallback GoBack()
    {
        if(history.Count == 0)
        {
            return new EventCallback();
        }
        else
        {
            var page = history.Pop();
            if(page.Id == Guid.Empty)
            {
                currentItemId = Guid.Empty;
                drives = dbService.GetDrives();
                this.StateHasChanged();
                return new EventCallback();
            }
            currentItemId = page.Id;
            currentItemType = page.Type;
            return GetItems(currentItemId, currentItemType);
        }
    }
    public void DivideFiles()
    {
        files = new List<File>();
        folders = new List<Folder>();
        foreach (var item in items)
        {
            if (item.GetType() == typeof(File))
            {
                files.Add((File)item);
            }
            else
            {
                folders.Add((Folder)item);
            }
        }
    }
}